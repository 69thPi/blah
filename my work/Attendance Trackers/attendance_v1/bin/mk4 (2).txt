#include<bits/stdc++.h>

using namespace std;

tm* get_node()
{
  time_t tym;
  tm *node;
  time(&tym);
  node=localtime(&tym);
  return node;
}


class attn
{
    char subName[30];
    int P;
    int A;
    int T;
    bool bunk;
    int dd;
    int mm;
    int yyyy;
public:
    attn()
    {
        P=0;
        A=0;
        T=0;
        bunk=false;
        dd=0;
        mm=0;
        yyyy=0;
    }
    void copyfn(attn &a)
    {
        strcpy(subName,a.subName);
        P=a.P;
        A=a.A;
        T=a.T;
        dd=a.dd;
        mm=a.mm;
    }
    void disp()
    {
        cout<<"----"<<subName<<"----"<<endl;
        cout<<"present :"<<P<<endl;
        cout<<"absent :"<<A<<endl;
        cout<<"total :"<<T<<endl;
        cout<<"bunk :"<<bunk<<endl;
        cout<<dd<<"-"<<mm<<"-"<<yyyy<<endl;
    }
    void getName(char n[30])
    {
        strcpy(subName,n);
    }
    int srch(char name[30])
    {
        return strcmpi(name,subName);
    }
    int datenottoday()
    {
        if(dd==get_node()->tm_mday && mm==get_node()->tm_mon)
            return 0;///false
        else
            return 1;///date is not todays///true
    }
    void askInp();
    void opn2();
};

/// ////
void DispDay(int n)
{
    switch(n)
        {
        case 0:cout<<"Sunday"<<endl;
                break;
        case 1:cout<<"Monday"<<endl;
                break;
        case 2:cout<<"Tuesday"<<endl;
                break;
        case 3:cout<<"Wednesday"<<endl;
                break;
        case 4:cout<<"Thursday"<<endl;
                break;
        case 5:cout<<"Friday"<<endl;
                break;
        }
}

/// /////////////////////////////////////
/// ////////////SET UP///////////////////
/// /////////////////////////////////////
int nOfPe=0;
int nOfSub=0;
int ttbl[10];/// for reading subjects
char subjects[20][30];/// subjects for each day
char temp[20][30];
int ext[50];///extract
/// /////////////////////////////////////
void write_ttbl()
{
    int timeTbl[5][10];///store the periods
    char sub[20][30],ig[2];///store subject names
    cout<<"enter number of subjects:";
    cin>>nOfSub;
    if(nOfSub==0)
    {
        cout<<"ERROR! not possible"<<endl;
        exit(0);
    }
    gets(ig);///to handle enter button
    system("pause");
    system("cls");
    cout<<"PLEASE ENTER SUBJECT NAMES"<<endl;
    for(int i=0;i<nOfSub;i++)
    {
        cout<<"enter subject "<<i+1<<" :";
        gets(sub[i]); ///enter subject names
    }
    system("cls");
    cout<<"enter max. number of periods per day:";
    cin>>nOfPe; ///enter number of periods max.
    if(nOfPe==0)
    {
        cout<<"ERROR! not possible"<<endl;
        exit(0);
    }
    for(int j=0;j<5;j++)
    {
        system("cls");
        for(int k=0;k<nOfSub;k++)
           cout<<"-> "<<k+1<<" for "<<sub[k]<<endl;
        DispDay(j);
     for(int i=0;i<nOfPe;i++)
     {
        do{
        cout<<"enter subject "<<i+1<<" :";
        cin>>timeTbl[j][i];
        timeTbl[j][i]-=1;
        }while(timeTbl[j][i]>=nOfSub || timeTbl[j][i]<0);
     }
    }
    ofstream subname("subjects.txt");
    ofstream ttbl("timetable.txt");
    for(int i=0;i<nOfSub;i++)///write subjects into file
        subname<<sub[i]<<endl;
    for(int i=0;i<5;i++)
        for(int j=0;j<nOfPe;j++)
          ttbl<<timeTbl[i][j]<<endl;
    ttbl<<nOfPe<<endl;/// last element of ttbl.txt
    subname.close();
    ttbl.close();
}
/// /////////////////////////////////////
/// ///////////////RUN///////////////////
/// /////////////////////////////////////


void getSub()
{
    char t[30];
    int k=0;
     ifstream fin1("subjects.txt");
    while(fin1.getline(t,30,'\n'))
    {
        strcpy(temp[k],t);
        k++;
    }
    nOfSub=k;///global var set
    fin1.close();
}
void getOrder()
{
    ifstream fin("timetable.txt");
    int n,c=0;
    while(fin>>n) ///read data
    {
        ext[c]=n;
        c++;
    }
    nOfPe=ext[--c];/// global var set to last element stored in extract
    fin.close();
}
void getPrd()///get subjects for each day
{
    getOrder();
    int j=0;
    int day=get_node()->tm_wday;
    int init=day*2;
    for(int i=init,j=0;i<init+nOfPe;i++,j++)
    {
      ttbl[j]=ext[i];/// ext global
    }
    getSub();/// set temp array
    for(int i=0;i<nOfPe;i++)
    {
        strcpy(subjects[i],temp[ttbl[i]]);/// temp global
    }
}

void attn::askInp()/// asks for input of subjects acc. to time table //v1.01
{
    int flag=0;
        cout<<"-----enter for "<<subName<<"-----"<<endl;
        cout<<"enter P=present A=absent B=bunk"<<endl;
            char inp;
                cin>>inp;

                switch(inp)
                {
                    case 'p':
                    case 'P':P++;
                            T++;
                        break;
                    case 'a':
                    case 'A':A++;
                            T++;
                        break;
                    case 'b':
                    case 'B':A++;
                            T++;
                            bunk=true;
                        break;
                  default:flag=1;
                        break;
                }
                dd=get_node()->tm_mday;
                mm=get_node()->tm_mon;
                yyyy=get_node()->tm_year+1900;
                if(flag==1)
                    askInp();

}

void readAttn(int &cnt,int flag=0)
{
    cnt=0;
    attn node;
    ifstream reAtn("attendance.dat",ios::binary);
     while(reAtn.read((char*)&node,sizeof(attn)))
     {
         if(flag==1)///call by display fn
           node.disp();
        cnt++;
     }
    reAtn.close();
}

void initNode(char name[30],attn &node)
{
    attn T;
    int cnt;
    readAttn(cnt);
    if(cnt!=0)
      cnt--;

    ifstream init("attendance.dat",ios::binary);
    if(!init)
        node.getName(name);///if file isnt made for first time
    else
    {
        int found=0;
            for(int i=cnt;i>=0;i--)
            {
                init.seekg(i*sizeof(attn));
                init.read((char*)&T,sizeof(attn));
                if(T.srch(name)==0)///if match then initialize
                {
                    node.copyfn(T);///copy function
                    found=1;
                    break;
                }
            }
            if(found==0)///no match found
                    node.getName(name);
    }
    init.close();
}

void inp_daily()
{
    getPrd();
    ofstream wrAtn("attendance.dat",ios::binary|ios::app);
    for(int i=0;i<nOfPe;i++)
    {
        attn node;
        initNode(subjects[i],node);///initialize data//along with subject name acc. to tym table
        if(node.datenottoday()==1)///true
        {
            node.askInp();/// update record
            wrAtn.write((char*)&node,sizeof(attn));///save data
        }
        else
        {
            cout<<"\tDONE FOR TODAY!!\nYou have already filled the attendance."<<endl;
            break;
        }
    }
    wrAtn.close();
}

void dispAllSubs()
{
        getSub();///set temp to all subs
        system("cls");
        cout<<"---------VIEW---------"<<endl;
        cout<<"----CHOOSE SUBJECT----"<<endl;
        for(int i=0;i<nOfSub;i++)
        {
            cout<<"  "<<i+1<<"     "<<temp[i]<<endl;
        }
        cout<<"your choice:";
}

void attn::opn2()/// error:function does not work for more than one record
{
        dispAllSubs();
        int ch;
        cin>>ch;
        ch--;
        char src[30];
        strcpy(src,temp[ch]);/// temp value of that ch it has to display subjects
        attn media;
        ifstream a("attendance.dat",ios::binary);
        remove("display.txt");///to clear any prev record;
        ofstream disp("display.txt");
        int cnt=0;
        float perc=0;
        disp<<"PRESENT   ABSENT     TOTAL     BUNK       DATE"<<endl;
        disp<<"================================================="<<endl;
        while(a.read((char*)&media,sizeof(attn)))///assuming data is in ascending order of date(dd+mm)
        {
            char bnk[]="NO ";
            if(media.srch(src)==0)///match found
            {
                if(media.bunk==1)
                    strcpy(bnk,"YES");
               disp<<"   "<<media.P<<"	|    "<<media.A<<"	  |    "<<media.T<<"   |   "<<bnk<<"     | "<<media.dd<<"-"<<media.mm<<"-"<<media.yyyy<<endl;
               perc=(float)media.P/media.T;
               cnt++;
            }
        }
        if(cnt!=0)
             disp<<"Attendance Percentage::"<<perc<<endl;
        else
            disp<<"              ***NO DATA***"<<endl;
        disp.close();
        a.close();
        system("display.txt");///opens file
        remove("display.txt");///delete file display file.txt
}

void flow()
{
    /// ignored vars. very handy :P
    int ig;
    attn ign;
        system("cls");
        ifstream chk("timetable.txt");
        if(!chk)
        {
            write_ttbl(); ///for initial setup
        }
        else
        {
            cout<<"------MENU------"<<endl;
            cout<<"   1      enter todays data"<<endl;
            cout<<"   2       view attendance"<<endl;
            cout<<"   3       edit attendance"<<endl;
            cout<<" YOUR CHOICE:";
            char ch;
            cin>>ch;
            switch(ch)
            {
                case '1':inp_daily();
                    break;
                case '2':ign.opn2();
                    break;
                default:
                    break;

            }
        }
}

int main()
{
    while(1)
    {
        flow();
        int flag=0,crt=0;
        while(1)
            {
                cout<<"Do You Wish To Exit?(y/n) \n>>";
                char ch;
                cin>>ch;
                switch(ch)
                {
                case 'y':
                case 'Y':flag=1;
                         crt=1;
                    break;
                case 'n':
                case 'N':crt=1;
                    break;
                default:
                    break;
                }
                if(crt==1)
                    break;
            }
            if(flag==1)
                break;
    }
    return 0;
}

void edit()
{
    ///accept subject and date from user and chk if date is valid and a weekday
    ///if yes then ask for input and write that part into attendance.dat
    ///
}



