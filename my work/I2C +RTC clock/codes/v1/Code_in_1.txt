#include <avr/io.h>
#include <util/delay.h>

#define F_CPU 1000000UL  //default frequency
#define F_dev 100000UL //freq of device
#define RTC_write 0xD0 //DS1307 WRITE ID
#define RTC_read 0xD1  //DS1307 READ ID
#define prescaler 1 //4^prescalar bits
#define TWBR_val ((((F_CPU/F_dev)/prescaler)-16)/2) //defines value of bit rate for TWI

int digits[6] = {0,0,0,0,0,0};
long int num = 60;//number of seconds


void i2c_init()
{
	TWBR=TWBR_val;
}

int i2c_start()
{
	TWCR=0x00; //initalize TWI control register
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN); //enable start,inilze.& flag regs. to set to start chnl
	while(!(TWCR & (1<<TWINT)));//wait for transmission
	if((TWSR & 0xF8) == 0x08 )  // true is write mode is set
		return 1;
	else
		return 0;
}

void i2c_stop()
{
	TWCR = (1<<TWEN)|(1<<TWINT)|(1<<TWSTO);
}

int i2c_write(uint8_t dat)
{
	TWDR=dat;
	TWCR = (1<<TWINT)|(1<<TWEN);
	while(!(TWCR & (1<<TWINT)));//wait for transmission
	//TWSR check if written if yes then return 1 else return 0;
	if(((TWSR & 0xF8) == 0x40) | (TWSR & 0xF8 == 0x28) | (TWSR & 0xF8 == 0x18))//25 for data,18 for addressR/W
	return 1;
	else
	return 0;
}

int i2c_read_ack(uint8_t *a)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
	while(!(TWCR & (1<<TWINT)));
	if ((TWSR & 0xF8) == 0x50)//check
	{
		*a=TWDR;
		return 1;
	}
	else
	return 0;
}

int i2c_read_nack(uint8_t *a)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
	while(!(TWCR & (1<<TWINT)));
	if ((TWSR & 0xF8) == 0x58)//check
	{
		*a=TWDR;
		return 1;
	}
	else
	return 0;
}
void rtc_init()
{
	// time to be set
	uint8_t hr  = 0x40; // 24 hr format 00
	uint8_t min = 0x00;
	uint8_t sec = 0x35;//35 sec
	uint8_t day = 0x06;
	uint8_t date= 0x16;
	uint8_t mon = 0x03;
	uint8_t yr  = 0x18;
	//
	i2c_init();
	while(!i2c_start());

	int flag=1,complete=0;
	while(!complete){
		while(flag){
			flag=i2c_write(RTC_write);//select device by sending address
			flag=i2c_write(0x00);//select register
			flag=i2c_write(sec);//send 1st register values
			flag=i2c_write(min);//send 2nd register values
			flag=i2c_write(hr);//send 3rd register values
			flag=i2c_write(day);//send 4th register values
			flag=i2c_write(date);//send 5th register values
			flag=i2c_write(mon);//send 6th register values
			flag=i2c_write(yr);//send 6th register values
			//flag=i2c_write(0x00); // set control register to 0
			complete=1;
			flag=0;
		}
		if(complete==0)
		{
			TWCR=(1<<TWINT) | (1<<TWSTA);//restart condition
			while(!(TWCR & (1<<TWINT)));//wait for transmission
		}
	}
	i2c_stop();
}

void rtc_read(uint8_t *hr,uint8_t *min,uint8_t *sec)//point to actual location
{
	i2c_init();
	while(!i2c_start());
	//set pointer
	i2c_write(RTC_write);
	i2c_write(0x00);
	i2c_stop();
	// pointer set to 0x00;
	i2c_start();
	//
	int flag=1,complete=0;
	while(!complete){
		while(flag){
			flag=i2c_write(RTC_read);//select device by sending address
			flag=i2c_read_ack(&sec);//read 1st register values
			flag=i2c_read_ack(&min);//read 2nd register values
			flag=i2c_read_nack(&hr);//read 3rd register values
			complete=1;
		}
		if(!complete)
		{
			TWCR=(1<<TWINT) | (1<<TWEN) |(1<<TWSTA);//restart condition
			while(!(TWCR & (1<<TWINT)));//wait for transmission
		}
	}
	i2c_stop();
}
void read_from_rtc()// read from RTC and assign "num"
{
	uint8_t hr=0,mm=0,ss=0;
	rtc_read(hr,mm,ss);  //read from rtc
	uint8_t temp=ss;
	int dig[]={0,0,0,0,0,0};
	dig[5]=(ss & 0b00001111);//extract first 4 bits
	dig[4]=(temp>>4);		 //extract next four bits
	temp=mm;
	dig[3]=(mm & 0b00001111);//extract first 4 bits
	dig[2]=(mm>>4);		 //extract next four bits
	temp=hr;
	dig[1]=(hr & 0b00001111);//extract first 4 bits
	dig[0]=(temp>>4)&0b00000011;		 //extract next 2 bits of the 4
	//digits assigned

	int h,m,s;
	h=(digits[0]*10)+digits[1];
	m=(digits[2]*10)+digits[3];
	s=(digits[4]*10)+digits[5];
	num = s+(m*60)+(h*3600);
	//num assigned
}

void set_display_val()
{
	int ss=num%60;
	int mm= (num/60)%60;
	int hh= (num /(3600))%12;//%24 for 24 hour version
	digits[5]=ss%10;
	ss/=10;
	digits[4]=ss;
	digits[3]=mm%10;
	mm/=10;
	digits[2]=mm;
	digits[1]=hh%10;
	hh/=10;
	digits[0]=hh;
	num++;
}

void set_dgt_port_small(int n)//common anode
{
	switch(n)
	{
		case 0: PORTD = 0b11000000;
		break;
		case 1: PORTD = 0b11111001;
		break;
		case 2: PORTD = 0b10100100;
		break;
		case 3: PORTD = 0b10110000;
		break;
		case 4: PORTD = 0b10011001;
		break;
		case 5: PORTD = 0b10010010;
		break;
		case 6: PORTD = 0b10000010;
		break;
		case 7: PORTD = 0b11111000;
		break;
		case 8: PORTD = 0b10000000;
		break;
		case 9: PORTD = 0b10010000;
		break;
	}
}

void set_dgt_port_big(int n)//common anode big ssd thru ULN (common cathode)
{
	switch(n)
	{
		case 0: PORTD = 0b00111111;
		break;
		case 1: PORTD = 0b00000110;
		break;
		case 2: PORTD = 0b01011011;
		break;
		case 3: PORTD = 0b01001111;
		break;
		case 4: PORTD = 0b01100110;
		break;
		case 5: PORTD = 0b01101101;
		break;
		case 6: PORTD = 0b01111101;
		break;
		case 7: PORTD = 0b00000111;
		break;
		case 8: PORTD = 0b01111111;
		break;
		case 9: PORTD = 0b01101111;
		break;
	}
}

void display_ssd()
{
	PORTB = 0x00; // all CP low
	for(int i=0;i<4;i++)
	{
		set_dgt_port_big(digits[i]);//set port value
		PORTB |= 1<<i; //cp
		_delay_ms(10);
		PORTB |= 0<<i;  //cp
	}
	for(int i=4;i<6;i++)
	{
		set_dgt_port_small(digits[i]);//set port value
		PORTB |= 1<<i; //cp
		_delay_ms(10);
		PORTB |= 0<<i;  //cp
	}
	_delay_ms(930);
}



int main(void)
{
	DDRB |=0xff; // clock pulse port
	DDRC |=0xff; //RTC DS-1307
	DDRD |=0Xff; //multiplexing signals
     // all set as output pins
  PORTB |=0xff; //cp high
	PORTC |=0x00; //ds1307 all low
	PORTD |=0x00;//initial condition all low;
	//EITHER/OR
	//write routiene 1st time
	  rtc_init(); //to set up rtc
	//read routiene
	  read_from_rtc(); //once to initalize
	//update num & assign digits & display
	while(1)
	{
		set_display_val(); // set the display value
		display_ssd();    // display procedure
	}
}

