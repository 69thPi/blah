//ball trajectories
#include <SFML/Graphics.hpp>
#include <iostream>
#include <math.h>
#include <time.h>
#include <stdio.h>
#include <fstream>

using namespace std;

void write(float val,sf::Vector2f b)
{
 ofstream fout("data.txt",ios::app);
 fout<<val<<"  x:"<<b.x<<"  y:"<<b.y<<endl;
 fout.close();
}

int main()
{

	sf::RenderWindow window(sf::VideoMode(500,700),"trajectories",sf::Style::Fullscreen);
	window.setPosition(sf::Vector2i(0.f,0.f));
	window.setVerticalSyncEnabled(true);
	sf::CircleShape ball;
	sf::RectangleShape bound_u;
	sf::RectangleShape bound_d;
	sf::RectangleShape bound_l;
	sf::RectangleShape bound_r;
	//(1280,796)==max co-ordinates
	//defining shapes
	//balli;
	ball.setRadius(10.f);
	ball.setPosition(sf::Vector2f(10,15));
	ball.setFillColor(sf::Color::Green);
	//bound_u
	bound_u.setFillColor(sf::Color::Red);
	bound_u.setSize(sf::Vector2f(1250.f,10.f));
	bound_u.setPosition(sf::Vector2f(0.f,0.f));
	//bound_d
	bound_d.setFillColor(sf::Color::Red);
	bound_d.setSize(sf::Vector2f(1250.f,10.f));
	bound_d.setPosition(sf::Vector2f(0.f,690.f));
	//bound_l
	bound_l.setFillColor(sf::Color::Red);
	bound_l.setSize(sf::Vector2f(10.f,700.f));
	bound_l.setPosition(sf::Vector2f(0.f,0.f));
	//bound_r
	bound_r.setFillColor(sf::Color::Red);
	bound_r.setSize(sf::Vector2f(10.f,700.f));
	bound_r.setPosition(sf::Vector2f(1240.f,0.f));
	
	bool start=false;
	float ball_angle=0.f;
	const float pi=3.14159265;
	float factor=2.f;
    bool rev=false;
	bool fwd=false;
	float y=0;
	sf::Clock clock;
	
	while(window.isOpen())
	{
		sf::Event event;
		while(window.pollEvent(event))
		{
			if(event.type==sf::Event::KeyPressed && event.key.code==sf::Keyboard::Escape)
			{
				window.close();
			}
			if(event.type==sf::Event::Resized)
			{
				cout<<window.getSize().x<<" "<<window.getSize().y<<endl;
			}
			if(event.type==sf::Event::MouseButtonPressed)
			{
			   start=true;
			   /*do
			   {
			     ball_angle=(rand() % 360) * pi / 360;
			   }while(abs(cos(ball_angle)<0.7f && abs(cos(ball_angle>0.6f))));*/
			   ball_angle=0.7f;
			}
			if(event.type==sf::Event::KeyPressed && event.key.code==sf::Keyboard::F)
			{
			  fwd=true;
			  rev=false;
			}
			if(event.type==sf::Event::KeyPressed && event.key.code==sf::Keyboard::R)
			{
			  rev=true;
			  fwd=false;
			}
			if(event.type==sf::Event::MouseWheelMoved && rev==true && fwd==false)
			{
				//sf::Vector2f bf=ball.getPosition();}
				factor-=1.f;
			 if(factor<0)
				 factor=0;
			 //write(factor,bf);
			}
			if(event.type==sf::Event::MouseWheelMoved && fwd==true && rev==false)
			{
				//sf::Vector2f bf=ball.getPosition();}
				factor+=1.f;
			 //write(factor,bf);
			}
			srand(time(NULL));
			if(event.type==sf::Event::KeyPressed && event.key.code==sf::Keyboard::N)
			{
				
				float x;
				x=rand()%400;
				x=x+y;
				ball.setFillColor(sf::Color::Green);
			   {
				ball.setPosition(sf::Vector2f(x+50,x+50));
				}
				y=y+50;
				if(x+y>740)
					y=y-600;
			}
		}
		srand(time(NULL));
		if(start)
		{
			float dt=clock.restart().asSeconds();
			ball.move(cos(ball_angle)*factor,-1*sin(ball_angle)*factor);
		}
		   
			
			{
			   if(ball.getPosition().x>1220.f)
				{
					ball_angle=pi-ball_angle;
				}
			  if(ball.getPosition().x<10.f)
				 {
					ball_angle=pi-ball_angle;
				 }
			  if(ball.getPosition().y<10.f)
				{
					ball_angle=-ball_angle;
				}
			  if(ball.getPosition().y>675.f)
				{
					ball_angle=((2*pi)-ball_angle);
				}
			}			
			window.clear(sf::Color::Black);
			
			{
			window.draw(ball);}
			window.draw(bound_d);
			window.draw(bound_l);
			window.draw(bound_r);
			window.draw(bound_u);
			window.display();
	}

}